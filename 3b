
#include <iostream>
#include <stdint.h>
#include <stdlib.h>
#include <sstream>
#include <fstream>
#include <vector>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <sqlite3.h>

using namespace std;

string Netmaskconversion(string netmask)
{
	int temp = atoi(netmask.c_str());
	uint32_t b = 0xFFFFFFFF << (32 - temp);
	ostringstream m;
	m << (b >> 24) << '.' << (b >> 16 & 0xFF) << '.' << (b >> 8 & 0xFF) << '.' << (b & 0xFF);
	return m.str();
}

unsigned long IPconversion(string ip)
{
	int b1, b2, b3, b4;
	unsigned long addresse = 0;

	if (sscanf(ip.c_str(), "%d.%d.%d.%d", &b1, &b2, &b3, &b4) != 4)
		return 0;

    addresse  = b1 << 24;
	addresse |= b2 << 16;
	addresse |= b3 << 8;
	addresse |= b4;
	return addresse ;
}



bool isInRange(const string ip, const string net, const string netmask)
{
	string mask1 = Netmaskconversion(netmask);
	unsigned long ip_adresse = IPconversion(ip);
	unsigned long net_adresse = IPconversion(net);
	unsigned long netmask_adresse = IPconversion(mask1);
	unsigned long net_lower = (net_adresse & netmask_adresse);
	unsigned long net_upper = (net_lower | (~netmask_adresse));

	if (ip_adresse >= net_lower && ip_adresse <= net_upper)
		return true;

	return false;
}


typedef vector<vector<string> > table_type;
static int callbackDB(void * table, int argc, char* argv[], char* szColName[])
{
    table_type* result = static_cast<table_type*>( table);
    vector<string> row;
    for (int i = 0; i < argc; i++)
        row.push_back(argv[i] ? argv[i] : "(NULL)");
    result ->push_back(row);
    return 0;
}


int main(int argc, char* argv[]) {
    
    
    int count;


if (argc > 1)
{
    for(int count = 1;count < argc; count++)

    if (strcmp(argv[1], "./program") == 0)
    cout<<'\0';
    else if  (argv[1]!= "./program") { cout << "Error: Missing argument ./program" << endl; return 0;} 

    if (strcmp(argv[2], "--database") == 0)
    cout<<'\0';
    else if  (argv[2]!= "--database") { cout << "Error: Missing argument --database" << endl; return 0;} 

    if (strcmp(argv[3], "./database.db") == 0)
    cout<<'\0';
    else if  (argv[3]!= "./database.db") { cout << "Error: Missing argument ./database.db" << endl; return 0;} 


    if (argv[4] == NULL) { cout << "Error: Missing argument ip address!" << endl; return 0;}

}

    
	sqlite3 *db;
	char *szErrMsg = 0;
	const char *querry;
	std::vector<vector<string> > table;

	int rc = sqlite3_open(argv[3], &db);

	querry = "SELECT * FROM addresse";

	if(rc)
	{
		cout << "Error: Can't open database" << endl;
		return 0;
	}

	rc = sqlite3_exec(db, querry, callbackDB, &table, &szErrMsg);

	if(rc != SQLITE_OK)
	{
		cout << "SQL Error: " << szErrMsg << std::endl;
		sqlite3_free(szErrMsg);
	}
	if(db)
	{
		sqlite3_close(db);
	}

	if (table.size() != 0)
	{
		for (int i = 0 ; i < table.size(); i++){
			vector<string> row(table[i]);
			if (isInRange(ip, row[0], row[1]))
				cout << row[0] << "/" << row[1]<< endl; 
		}
	} else {
		cout << "IP does not belong to the network";
	}

	return 0;
}
